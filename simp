#!/usr/bin/env python3
# generated by make_simp.py on 2020-05-17T19:50:41.510006
"""
simp.py sorts Python imports simply.

"""
from pathlib import Path
import os
import sys
import argparse
import itertools
#!/usr/bin/env python
"""
Myers diff of two lists or files

Inspired by
https://gist.github.com/adamnew123456/37923cf53f51d6b9af32a539cdfa7cc4
"""
import argparse

KEEP, INSERT, REMOVE, OMIT = 'kiro'

__version__ = '0.9.0'
__all__ = ('diff',)

_DEFAULT_FORMATS = {
    KEEP: ' %s',
    INSERT: '+%s',
    REMOVE: '-%s',
    OMIT: '(...%s removed...)',
}


def diff(a, b, context=None, format=None):
    """
    Return the Myers diff of two lists.

    The result is a list of (action, line) pairs,
    where ``action`` is one of ``'kiro'``, for keep,
    insert, remove, or omit.

    ARGUMENTS:
       a, b:
         The two files to compare

       context:
         How many lines of context to keep between blocks of changes?
         ``None``, the default, means keep all unchanged lines.
         ``0`` means throw away all the unchanged lines

       format: if non-empty, this format dictionary is used to format
         each diff entry

    """
    diff = _myers(a, b)

    if context is not None:
        diff = list(_compact(diff, context))

    if format:
        fmt = dict(_DEFAULT_FORMATS)
        if format is not True:
            fmt.update(format)

        diff = [(fmt[d] % e).rstrip() for d, e in diff]

    return diff


def _myers(a, b):
    front = {1: (0, [])}

    for d in range(0, len(a) + len(b) + 1):
        for k in range(-d, d + 1, 2):
            go_down = k == -d or (k != d and front[k - 1][0] < front[k + 1][0])

            if go_down:
                old_x, history = front[k + 1]
                x = old_x
            else:
                old_x, history = front[k - 1]
                x = old_x + 1
            y = x - k

            history = history[:]

            if 1 <= y <= len(b) and go_down:
                history.append((INSERT, b[y - 1]))
            elif 1 <= x <= len(a):
                history.append((REMOVE, a[x - 1]))

            while x < len(a) and y < len(b) and a[x] == b[y]:
                x += 1
                y += 1
                history.append((KEEP, a[x - 1]))

            if x >= len(a) and y >= len(b):
                return history

            front[k] = x, history

    # TODO: is this possible to reach?
    raise ValueError('Unable to compute diff')


def _compact(diff, context):
    queue = []
    results = []

    def omit():
        omitted = len(queue) - context
        if omitted > 0:
            results.append((OMIT, str(omitted)))

    for line in diff:
        if line[0] is KEEP:
            queue.append(line)
        else:
            if queue:
                omit()
                if context > 0:
                    results.extend(queue[-context:])
                queue[:] = []
            results.append(line)

    if queue:
        results.extend(queue[:context])
        omit()

    return results



def simp():
    args = _parse_args()
    all_files = list(_all_files(args.targets))
    changed_files = changed_lines = 0
    first = True

    for path in all_files:
        lines = path.read_text().splitlines()
        sorted_lines = _sort_imports(lines)
        if lines != sorted_lines:
            changed_files += 1

            mdiff = diff(lines, sorted_lines, context=2, format=True)
            delta = sum(i.startswith('+') for i in mdiff)

            changed_lines += delta
            if first:
                first = False
            else:
                print('', 50 * '-', '', sep='\n')

            print('%s: %s' % (path, _plural(delta, 'line')))

            if args.diff:
                print('', *mdiff, sep='\n')

            if args.execute:
                with open(path, 'w') as fp:
                    print(*sorted_lines, sep='\n', file=fp)

    if all_files:
        print()
    print('All files:', len(all_files))
    print('Imports out of order:')
    print('  Files:', changed_files)
    print('  Lines:', changed_lines)


def _plural(n, item, plural=None):
    if n != 1:
        item = plural if plural else item + 's'
    return '%d %s' % (n, item)


def _sort_imports(lines):
    def is_comment(s):
        s = s.strip()
        return not s or s.startswith('#')

    def is_import(s):
        return s.startswith('from ') or s.startswith('import ')

    def still_import(s):
        return is_import(s) or is_comment(s)

    before = list(itertools.takewhile((lambda s: not is_import(s)), lines))
    lines = lines[len(before) :]

    imports = list(itertools.takewhile(still_import, lines))
    after = lines[len(imports) :]

    while imports and is_comment(imports[-1]):
        after.insert(0, imports.pop())

    comments = [s for s in imports if is_comment(s)]
    imports = [s for s in imports if not is_comment(s)]

    return before + comments + sorted(set(imports)) + after


def _all_files(args):
    for arg in args:
        arg = Path(arg)
        if arg.is_dir():
            yield from _one_tree(arg)
        elif arg.suffix in ('.py', ''):
            yield arg
        else:
            print('Do not understand file', arg, file=sys.stderr)


def _one_tree(root):
    root = Path(root)
    for directory, sub_dirs, files in os.walk(root):
        path = Path(directory)
        if path == root:
            sub_dirs[:] = (i for i in sub_dirs if i not in ('build', 'dist'))

        sub_dirs[:] = (i for i in sub_dirs if not i.startswith('.'))
        files[:] = (i for i in files if not i.startswith('.'))

        yield from (path / f for f in files if f.endswith('.py'))


def _parse_args(args=None):
    p = argparse.ArgumentParser(description=_DESCRIPTION)

    p.add_argument('targets', default=['.'], nargs='*', help=_TARGETS_HELP)
    p.add_argument('--diff', '-d', action='store_true', help=_DIFF_HELP)
    p.add_argument('--execute', '-x', action='store_true', help=_EXECUTE_HELP)

    return p.parse_args(args)


_DESCRIPTION = 'Sort the import directives in Python source files'

_DIFF_HELP = """If set, print diffs for each changed file"""

_TARGETS_HELP = """\
One or more Python files or directories with Python files.
Without arguments, runs simp on the current directory.
"""

_EXECUTE_HELP = """\
If set, actually make the changes to the Python files, otherwise just
list them."""


if __name__ == '__main__':
    simp()
