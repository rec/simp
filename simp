#!/usr/bin/env python3
from pathlib import Path
import argparse
import itertools
import os
import safer
import sys


def simp(args):
    for path in _all_files(args):
        with safer.printer(path) as print:
            for line in _process_lines(path.read_text()):
                print(line)


BEFORE, OLD, NEW, AFTER = range(4)


def process_lines(lines):
    def is_comment(s):
        s = s.strip()
        return not s or s.startswith('#')

    def is_import(s):
        return s.startswith('from ') or s.startswith('import ')

    def still_import(s):
        return is_import(s) or is_comment(s)

    before = list(itertools.takewhile(lambda s: not is_import(s), lines))
    lines = lines[len(before):]

    imports = list(itertools.takewhile(still_import, lines))
    after = lines[len(imports):]

    while imports and is_comment(imports[-1]):
        after.insert(0, imports.pop())

    comments = [s for s in imports if is_comment(s)]
    sorted_imports = comments + sorted(s for s in imports if not is_comment(s))

    return before, imports, sorted_imports, after


def _process_lines(text):
    before, _, sorted_imports, after = process_lines(text.splitlines())
    return before + sorted_imports + after


def _all_files(args):
    for arg in args:
        arg = Path(arg)
        if arg.is_dir():
            yield from _one_tree(arg)
        elif arg.suffix in ('.py', ''):
            yield arg
        else:
            print('Do not understand file', arg, file=sys.stderr)


def _one_tree(root):
    root = Path(root)
    for directory, sub_dirs, files in os.walk(root):
        path = Path(directory)
        if path == root:
            sub_dirs[:] = (i for i in sub_dirs if i not in ('build', 'dist'))

        sub_dirs[:] = (i for i in sub_dirs if not i.startswith('.'))
        files[:] = (i for i in files if not i.startswith('.'))

        yield from (path / f for f in files if f.endswith('.py'))


def _args(args=None):
    p = argparse.ArgumentParser(description=_DESCRIPTION)

    p.add_argument('target-files', default=None, nargs='+', help=_TARGET_HELP)
    p.add_argument('--dry-run', '-d', action='store_true', help=_DRY_RUN_HELP)
    p.add_argument('--quiet', '-q', action='store_true', help=_QUIET_HELP)

    return p.parse_args(args)


_DESCRIPTION = 'Sort the import directives in Python source code'

_QUIET_HELP = """\
If set, don't print any messages or errors"""

_DRY_RUN_HELP = """\
If set, print the changed files but do not overwrite them."""

_TARGET_HELP = """\
One or more Python files or directories with Python files."""


if __name__ == '__main__':
    simp(sys.argv[1:] or ['.'])
